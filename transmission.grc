options:
  parameters:
    author: ''
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: ''
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: qt_gui
    hier_block_src_path: '.:'
    id: transmission
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: prompt
    sizing_mode: fixed
    thread_safe_setters: ''
    title: Not titled yet
    window_size: ''
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 8]
    rotation: 0
    state: enabled

blocks:
- name: Tx_gain
  id: variable_qtgui_range
  parameters:
    comment: ''
    gui_hint: ''
    label: Transmission Gain
    min_len: '200'
    orient: Qt.Horizontal
    rangeType: float
    start: '0'
    step: '1'
    stop: '89.8'
    value: '44.9'
    widget: counter_slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [300, 7]
    rotation: 0
    state: enabled
- name: frequency
  id: variable_qtgui_range
  parameters:
    comment: ''
    gui_hint: ''
    label: Frequency Range
    min_len: '200'
    orient: Qt.Horizontal
    rangeType: float
    start: 5.6e9
    step: '1'
    stop: 5.72e9
    value: 5.665e9
    widget: counter_slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [464, 7]
    rotation: 0
    state: enabled
- name: sample_rate
  id: variable
  parameters:
    comment: ''
    value: 32e3
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [189, 8]
    rotation: 0
    state: true
- name: blocks_float_to_complex_0
  id: blocks_float_to_complex
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [687, 133]
    rotation: 0
    state: enabled
- name: blocks_repeat_0
  id: blocks_repeat
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    interp: int(1024*32)
    maxoutbuf: '0'
    minoutbuf: '0'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [905, 191]
    rotation: 0
    state: enabled
- name: blocks_uchar_to_float_0
  id: blocks_uchar_to_float
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [462, 176]
    rotation: 0
    state: enabled
- name: epy_block_0
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\nimport pmt\n\nguiString = \"\"\n\nmorseDictionary =\
      \ {\n    \"A\": \"1,0,1,1,1\",\n    \"B\": \"1,1,1,0,1,0,1,0,1\",\n    \"C\"\
      : \"1,1,1,0,1,0,1,1,1,0,1\",\n    \"D\": \"1,1,1,0,1,0,1\",\n    \"E\": \"1\"\
      ,\n    \"F\": \"1,0,1,0,1,1,1,0,1\",\n    \"G\": \"1,1,1,0,1,1,1,0,1\",\n  \
      \  \"H\": \"1,0,1,0,1,0,1\",\n    \"I\": \"1,0,1\",\n    \"J\": \"1,0,1,1,1,0,1,1,1,0,1,1,1\"\
      ,\n    \"K\": \"1,1,1,0,1,0,1,1,1\",\n    \"L\": \"1,0,1,1,1,0,1,0,1\",\n  \
      \  \"M\": \"1,1,1,0,1,1,1\",\n    \"N\": \"1,1,1,0,1\",\n    \"O\": \"1,1,1,0,1,1,1,0,1,1,1\"\
      ,\n    \"P\": \"1,0,1,1,1,0,1,1,1,0,1\",\n    \"Q\": \"1,1,1,0,1,1,1,0,1,0,1,1,1\"\
      ,\n    \"R\": \"1,0,1,1,1,0,1\",\n    \"S\": \"1,0,1,0,1\",\n    \"T\": \"1,1,1\"\
      ,\n    \"U\": \"1,0,1,0,1,1,1\",\n    \"V\": \"1,0,1,0,1,0,1,1,1\",\n    \"\
      W\": \"1,0,1,1,1,0,1,1,1\",\n    \"X\": \"1,1,1,0,1,0,1,0,1,1,1\",\n    \"Y\"\
      : \"1,1,1,0,1,0,1,1,1,0,1,1,1\",\n    \"Z\": \"1,1,1,0,1,1,1,0,1,0,1\",\n  \
      \  \" \": \"0\",            \n    \"1\": \"1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1\"\
      ,\n    \"2\": \"1,0,1,0,1,1,1,0,1,1,1,0,1,1,1\",\n    \"3\": \"1,0,1,0,1,0,1,1,1,0,1,1,1\"\
      ,\n    \"4\": \"1,0,1,0,1,0,1,0,1,1,1\",\n    \"5\": \"1,0,1,0,1,0,1,0,1\",\n\
      \    \"6\": \"1,1,1,0,1,0,1,0,1,0,1\",\n    \"7\": \"1,1,1,0,1,1,1,0,1,0,1,0,1\"\
      ,\n    \"8\": \"1,1,1,0,1,1,1,0,1,1,1,0,1,0,1\",\n    \"9\": \"1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1\"\
      ,\n    \"0\": \"1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1\",\n    \".\": \"1,0,1,1,1,0,1,0,1,1,1,0,1,0,1,1,1\"\
      ,          \n    \",\": \"1,1,1,0,1,1,1,0,1,0,1,0,1,1,1,0,1,1,1\",      \n \
      \   \":\": \"1,1,1,0,1,1,1,0,1,1,1,0,1,0,1,0,1\",          \n    \"?\": \"1,0,1,0,1,1,1,0,1,1,1,0,1,0,1\"\
      ,              \n    \"'\": \"1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1\",     \
      \ \n    \"-\": \"1,1,1,0,1,0,1,0,1,0,1,0,1,1,1\",              \n    \"/\":\
      \ \"1,1,1,0,1,0,1,0,1,1,1,0,1\",                  \n    \"(\": \"1,1,1,0,1,0,1,1,1,0,1,1,1,0,1\"\
      ,              \n    \")\": \"1,1,1,0,1,0,1,1,1,0,1,1,1,0,1,0,1,1,1\",     \
      \ \n    \"\\\"\": \"1,0,1,1,1,0,1,0,1,0,1,1,1,0,1\",             \n    \"=\"\
      : \"1,1,1,0,1,0,1,0,1,0,1,1,1\",                  \n    \"+\": \"1,0,1,1,1,0,1,0,1,1,1,0,1\"\
      ,                  \n    \"@\": \"1,0,1,1,1,0,1,1,1,0,1,0,1,1,1,0,1\",     \
      \      \n    \"!\": \"1,1,1,0,1,0,1,1,1,0,1,0,1,1,1,0,1,1,1\",      \n    \"\
      &\": \"1,0,1,1,1,0,1,0,1,0,1\",                      \n    \";\": \"1,1,1,0,1,0,1,1,1,0,1,0,1,1,1,0,1\"\
      ,          \n    \"_\": \"1,0,1,0,1,1,1,0,1,1,1,0,1,0,1,1,1\",          \n \
      \   \"$\": \"1,0,1,0,1,0,1,1,1,0,1,0,1,0,1,1,1\"           \n    }\n\nclass\
      \ blk(gr.sync_block):  \n    \"\"\"Binary Morse Encoder\"\"\"\n\n    def __init__(self):\
      \  # only default arguments here\n        \"\"\"arguments to this function show\
      \ up as parameters in GRC\"\"\"\n        gr.sync_block.__init__(\n         \
      \   self,\n            name = 'Binary Morse Encoder',   # will show up in GRC\n\
      \            in_sig = None,\n            out_sig = [np.byte]\n        )\n\n\
      \        self.message_port_register_out(pmt.intern(\"Clear\"))\n        self.message_port_register_in(pmt.intern(\"\
      inputMessage\"))\n        self.set_msg_handler(pmt.intern(\"inputMessage\"),\
      \ self.guiMessage)\n        # if an attribute with the same name as a parameter\
      \ is found,\n        # a callback is registered (properties work, too).\n\n\
      \    def guiMessage(self, message):\n\n        global guiString\n\n        coordinateFile\
      \ = open(\"/home/mihneab/PycharmProjects/Licenta/coordinates.txt\", \"r\")\n\
      \        fileRead = coordinateFile.read() \n      \n        guiString += fileRead\n\
      \        guiString += \" \"        \n        guiString += pmt.symbol_to_string(message)\n\
      \        guiString = guiString.replace(\"\\n\", \"\")\n\n        print(guiString)\n\
      \n    def work(self, input_items, output_items):\n        \"\"\"Turn GPS coordinates\
      \ and the input message in binary\"\"\"\n        global morseDictionary\n  \
      \      global guiString\n\n        bits = \"\"\n\n        if (len (guiString)\
      \ > 0):\n            for element in guiString:\n                # convert to\
      \ string in case there are just numbers\n                stringElement = str(element)\n\
      \                # convert to upper case\n                character = stringElement.upper()\n\
      \                # check if the character is in the dictionary\n           \
      \     if (not(character in morseDictionary)):\n                    # unknown\
      \ characters are replaced with ?                        \n                 \
      \   character = \"?\" \n                # save the morse character in a variable\
      \       \n                morseCh = str(morseDictionary.get(character))\n  \
      \              # concatenate it to the bit string, 0,0,0 is the space between\
      \ characters\n                bits += (morseCh + \",0,0,0,\")\n            \n\
      \            # concatenate 0,0,0,0 to mark the word's end\n            bits\
      \ += \"0,0,0,0\"\n\n            # get the length of the string, commas included\n\
      \            length = len(bits)\n            # obtain number of commas\n   \
      \         commaNumber = bits.count(\",\")\n            # obtain the number of\
      \ elements, no commas included\n            elementNumber = length - commaNumber\n\
      \            # split by comma\n            bitsSplit = bits.split(\",\")\n \
      \           length = len(bitsSplit)\n\n            # write the values in the\
      \ output\n            for i in range(length):\n                output_items[0][i]\
      \ = bitsSplit[i]\n            \n            # update the message edit box\n\
      \            guiString = \"\"\n            self.message_port_pub(pmt.intern('Clear'),\
      \ pmt.intern(\"\"))\n        # in case there is no input        \n        else:\n\
      \            elementNumber = 0\n        # not relevant\n        return(elementNumber)\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('Binary Morse Encoder', 'blk', [], [('inputMessage', 'message', 1)],
      [('0', 'byte', 1), ('Clear', 'message', 1)], 'Binary Morse Encoder', [])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [172, 176]
    rotation: 0
    state: enabled
- name: epy_block_1
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\n\n\nclass blk(gr.sync_block):  # other base classes\
      \ are basic_block, decim_block, interp_block\n    \"\"\"Embedded Python Block\
      \ example - a simple multiply const\"\"\"\n\n    def __init__(self, path='/home/mihneab/PycharmProjects/Licenta/coordinates.txt'):\
      \  # only default arguments here\n        \"\"\"arguments to this function show\
      \ up as parameters in GRC\"\"\"\n        gr.sync_block.__init__(\n         \
      \   self,\n            name = 'GPS Source',   # will show up in GRC\n      \
      \      in_sig = None,\n            out_sig = [np.float32]\n        )\n     \
      \   # if an attribute with the same name as a parameter is found,\n        #\
      \ a callback is registered (properties work, too).m\n        self.path = path\n\
      \n    def work(self, input_items, output_items):\n        \"\"\"example: multiply\
      \ with constant\"\"\"\n        # read the acquired coordinates and process them\
      \        \n        file = open(self.path, \"r\")\n        interm = file.read()\n\
      \        listInterm = interm.split()\n        length = len(listInterm)\n   \
      \     \n        # since 2 float/double values are expected, they can be written\
      \ directly to the output\n        output_items[0][0] = listInterm[0]\n     \
      \   output_items[0][1] = listInterm[1]\n        \n        # write the output\
      \ in a file for viewing\n        file = open(\"/home/mihneab/PycharmProjects/Licenta/testGPS.txt\"\
      , \"w\")\n        file.write(str(output_items[0][0]))\n        file.write(\"\
      \ \")\n        file.write(str(output_items[0][1]))\n        file.close()\n \
      \       return len(output_items[0][:length])\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    path: '''/home/mihneab/PycharmProjects/Licenta/coordinates.txt'''
  states:
    _io_cache: ('GPS Source', 'blk', [('path', "'/home/mihneab/PycharmProjects/Licenta/coordinates.txt'")],
      [], [('0', 'float', 1)], 'Embedded Python Block example - a simple multiply
      const', ['path'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [218, 489]
    rotation: 0
    state: disabled
- name: epy_block_2
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\nimport pmt\n\n# shorter dictionary since only digits,\
      \ periods and spaces are expected\nshortMorseDictionary = {\n    \" \": \"0\"\
      ,            \n    \"1\": \"1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1\",\n    \"2\"\
      : \"1,0,1,0,1,1,1,0,1,1,1,0,1,1,1\",\n    \"3\": \"1,0,1,0,1,0,1,1,1,0,1,1,1\"\
      ,\n    \"4\": \"1,0,1,0,1,0,1,0,1,1,1\",\n    \"5\": \"1,0,1,0,1,0,1,0,1\",\n\
      \    \"6\": \"1,1,1,0,1,0,1,0,1,0,1\",\n    \"7\": \"1,1,1,0,1,1,1,0,1,0,1,0,1\"\
      ,\n    \"8\": \"1,1,1,0,1,1,1,0,1,1,1,0,1,0,1\",\n    \"9\": \"1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1\"\
      ,\n    \"0\": \"1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1\",\n    \".\": \"1,0,1,1,1,0,1,0,1,1,1,0,1,0,1,1,1\"\
      ,         \n    \"?\": \"1,0,1,0,1,1,1,0,1,1,1,0,1,0,1\"    \n    }\n\n\nclass\
      \ blk(gr.sync_block):  # other base classes are basic_block, decim_block, interp_block\n\
      \    \"\"\"Embedded Python Block example - a simple multiply const\"\"\"\n\n\
      \    def __init__(self):  # only default arguments here\n        \"\"\"arguments\
      \ to this function show up as parameters in GRC\"\"\"\n        gr.sync_block.__init__(\n\
      \            self,\n            name='Binary Morse Encoder (GPS)',   # will\
      \ show up in GRC\n            in_sig=[np.float32],\n            out_sig=None\n\
      \        )\n        # if an attribute with the same name as a parameter is found,\n\
      \        # a callback is registered (properties work, too).\n\n    def work(self,\
      \ input_items, output_items):\n        \"\"\"example: multiply with constant\"\
      \"\"\n        global shortMorseDictionary\n\n        bits = \"\"\n        #\
      \ read the GPS coordinates\n        file = open(\"/home/mihneab/PycharmProjects/Licenta/testGPS.txt\"\
      , \"r\")\n        intermediary = file.read()\n        file.close()\n       \
      \ # similar check with the main encoder\n        for character in intermediary:\n\
      \            if (not(character in shortMorseDictionary)):\n                character\
      \ = \"?\"\n            dots = str(shortMorseDictionary.get(character))\n   \
      \         bits = bits + dots\n            bits = bits + \",0,0,0,\"\n      \
      \  # write the result in a file\n        file2 = open(\"/home/mihneab/PycharmProjects/Licenta/testGPS2.txt\"\
      , \"w\")\n        file2.write(bits)\n        file2.close()\n\n        return\
      \ len(bits)\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('Binary Morse Encoder (GPS)', 'blk', [], [('0', 'float', 1)], [],
      'Embedded Python Block example - a simple multiply const', [])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [506, 492]
    rotation: 0
    state: disabled
- name: epy_block_3
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\n\n\nclass blk(gr.sync_block):  # other base classes\
      \ are basic_block, decim_block, interp_block\n    \"\"\"Embedded Python Block\
      \ example - a simple multiply const\"\"\"\n\n    def __init__(self):  # only\
      \ default arguments here\n        \"\"\"arguments to this function show up as\
      \ parameters in GRC\"\"\"\n        gr.sync_block.__init__(\n            self,\n\
      \            name = 'Combine the message with GPS coordinates',   # will show\
      \ up in GRC\n            in_sig = [np.byte],\n            out_sig = [np.byte]\n\
      \        )\n        # if an attribute with the same name as a parameter is found,\n\
      \        # a callback is registered (properties work, too).\n\n    def work(self,\
      \ input_items, output_items):\n        \"\"\"This should combine GPS coordinates\
      \ and the input message seamlessly\"\"\"\n        # read the encoded GPS coordinates\n\
      \        file = open(\"/home/mihneab/PycharmProjects/Licenta/testGPS2.txt\"\
      , \"r\")\n        lines = file.read()\n        file.close()\n\n        goodString\
      \ = \"\"\n       \n        # remove whitespace from the end, split by comma\n\
      \        lines = lines[:-1]            \n        lines = lines.strip()\n   \
      \     intermediary = lines.split(\",\")\n        \n        # add the bits in\
      \ a string\n        for bit in intermediary:\n            goodString += str(bit)\n\
      \n        # read the input from the binary morse encoder block and process it\n\
      \        inputMessage = str(input_items[0])\n        inputMessage = inputMessage.replace(\"\
      [\", \"\")\n        inputMessage = inputMessage.replace(\"]\", \"\")\n     \
      \   inputMessage = inputMessage.replace(\" \", \"\")\n        # combine the\
      \ GPS coordinates and the input message\n        finalMessage = goodString +\
      \ inputMessage\n\n        # write them to the output\n        for i in range(len(finalMessage)):\n\
      \            output_items[0][:] = finalMessage[i]\n        \n        # write\
      \ them in a file in order to be checked\n        file = open(\"/home/mihneab/PycharmProjects/Licenta/testGPS3.txt\"\
      , \"w\")\n        file.write(str(output_items[0][:]))\n        file.close()\
      \        \n\n        return len(output_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('Combine the message with GPS coordinates', 'blk', [], [('0', 'byte',
      1)], [('0', 'byte', 1)], 'Embedded Python Block example - a simple multiply
      const', [])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [468, 294]
    rotation: 0
    state: disabled
- name: qtgui_edit_box_msg_0
  id: qtgui_edit_box_msg
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    gui_hint: ''
    is_pair: 'False'
    is_static: 'True'
    key: ''
    label: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    type: string
    value: ''
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [129, 264]
    rotation: 180
    state: enabled
- name: qtgui_freq_sink_x_0
  id: qtgui_freq_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    average: '1.0'
    axislabels: 'True'
    bw: 1e3
    color1: '"blue"'
    color10: '"dark blue"'
    color2: '"red"'
    color3: '"green"'
    color4: '"black"'
    color5: '"cyan"'
    color6: '"magenta"'
    color7: '"yellow"'
    color8: '"dark red"'
    color9: '"dark green"'
    comment: ''
    ctrlpanel: 'True'
    fc: 5.665e9
    fftsize: '1024'
    freqhalf: 'True'
    grid: 'False'
    gui_hint: ''
    label: Relative Gain
    label1: ''
    label10: ''''''
    label2: ''''''
    label3: ''''''
    label4: ''''''
    label5: ''''''
    label6: ''''''
    label7: ''''''
    label8: ''''''
    label9: ''''''
    legend: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    name: Morse signal spectrum before transmission
    nconnections: '1'
    showports: 'False'
    tr_chan: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_tag: '""'
    type: complex
    units: dB
    update_time: '0.10'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    wintype: firdes.WIN_HAMMING
    ymax: '10'
    ymin: '-140'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1238, 506]
    rotation: 0
    state: true
- name: qtgui_time_sink_x_0
  id: qtgui_time_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    axislabels: 'True'
    color1: blue
    color10: dark blue
    color2: red
    color3: green
    color4: black
    color5: cyan
    color6: magenta
    color7: yellow
    color8: dark red
    color9: dark green
    comment: ''
    ctrlpanel: 'True'
    entags: 'True'
    grid: 'False'
    gui_hint: ''
    label1: Signal 1
    label10: Signal 10
    label2: Signal 2
    label3: Signal 3
    label4: Signal 4
    label5: Signal 5
    label6: Signal 6
    label7: Signal 7
    label8: Signal 8
    label9: Signal 9
    legend: 'True'
    marker1: '-1'
    marker10: '-1'
    marker2: '-1'
    marker3: '-1'
    marker4: '-1'
    marker5: '-1'
    marker6: '-1'
    marker7: '-1'
    marker8: '-1'
    marker9: '-1'
    name: Morse signal in time before transmission
    nconnections: '1'
    size: '1024'
    srate: 256*256
    stemplot: 'False'
    style1: '1'
    style10: '1'
    style2: '1'
    style3: '1'
    style4: '1'
    style5: '1'
    style6: '1'
    style7: '1'
    style8: '1'
    style9: '1'
    tr_chan: '0'
    tr_delay: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_slope: qtgui.TRIG_SLOPE_POS
    tr_tag: '""'
    type: complex
    update_time: '0.10'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    ylabel: Amplitude
    ymax: '1'
    ymin: '-1'
    yunit: '""'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1303, 113]
    rotation: 0
    state: enabled
- name: uhd_usrp_sink_0
  id: uhd_usrp_sink
  parameters:
    affinity: ''
    alias: ''
    ant0: TX/RX
    ant1: TX/RX
    ant10: TX/RX
    ant11: TX/RX
    ant12: TX/RX
    ant13: TX/RX
    ant14: TX/RX
    ant15: TX/RX
    ant16: TX/RX
    ant17: TX/RX
    ant18: TX/RX
    ant19: TX/RX
    ant2: TX/RX
    ant20: TX/RX
    ant21: TX/RX
    ant22: TX/RX
    ant23: TX/RX
    ant24: TX/RX
    ant25: TX/RX
    ant26: TX/RX
    ant27: TX/RX
    ant28: TX/RX
    ant29: TX/RX
    ant3: TX/RX
    ant30: TX/RX
    ant31: TX/RX
    ant4: TX/RX
    ant5: TX/RX
    ant6: TX/RX
    ant7: TX/RX
    ant8: TX/RX
    ant9: TX/RX
    bw0: 200e3
    bw1: '0'
    bw10: '0'
    bw11: '0'
    bw12: '0'
    bw13: '0'
    bw14: '0'
    bw15: '0'
    bw16: '0'
    bw17: '0'
    bw18: '0'
    bw19: '0'
    bw2: '0'
    bw20: '0'
    bw21: '0'
    bw22: '0'
    bw23: '0'
    bw24: '0'
    bw25: '0'
    bw26: '0'
    bw27: '0'
    bw28: '0'
    bw29: '0'
    bw3: '0'
    bw30: '0'
    bw31: '0'
    bw4: '0'
    bw5: '0'
    bw6: '0'
    bw7: '0'
    bw8: '0'
    bw9: '0'
    center_freq0: frequency
    center_freq1: '0'
    center_freq10: '0'
    center_freq11: '0'
    center_freq12: '0'
    center_freq13: '0'
    center_freq14: '0'
    center_freq15: '0'
    center_freq16: '0'
    center_freq17: '0'
    center_freq18: '0'
    center_freq19: '0'
    center_freq2: '0'
    center_freq20: '0'
    center_freq21: '0'
    center_freq22: '0'
    center_freq23: '0'
    center_freq24: '0'
    center_freq25: '0'
    center_freq26: '0'
    center_freq27: '0'
    center_freq28: '0'
    center_freq29: '0'
    center_freq3: '0'
    center_freq30: '0'
    center_freq31: '0'
    center_freq4: '0'
    center_freq5: '0'
    center_freq6: '0'
    center_freq7: '0'
    center_freq8: '0'
    center_freq9: '0'
    clock_rate: '32000000'
    clock_source0: ''
    clock_source1: ''
    clock_source2: ''
    clock_source3: ''
    clock_source4: ''
    clock_source5: ''
    clock_source6: ''
    clock_source7: ''
    comment: ''
    dev_addr: '""'
    dev_args: '""'
    gain0: Tx_gain
    gain1: '0'
    gain10: '0'
    gain11: '0'
    gain12: '0'
    gain13: '0'
    gain14: '0'
    gain15: '0'
    gain16: '0'
    gain17: '0'
    gain18: '0'
    gain19: '0'
    gain2: '0'
    gain20: '0'
    gain21: '0'
    gain22: '0'
    gain23: '0'
    gain24: '0'
    gain25: '0'
    gain26: '0'
    gain27: '0'
    gain28: '0'
    gain29: '0'
    gain3: '0'
    gain30: '0'
    gain31: '0'
    gain4: '0'
    gain5: '0'
    gain6: '0'
    gain7: '0'
    gain8: '0'
    gain9: '0'
    len_tag_name: ''
    lo_export0: 'False'
    lo_export1: 'False'
    lo_export10: 'False'
    lo_export11: 'False'
    lo_export12: 'False'
    lo_export13: 'False'
    lo_export14: 'False'
    lo_export15: 'False'
    lo_export16: 'False'
    lo_export17: 'False'
    lo_export18: 'False'
    lo_export19: 'False'
    lo_export2: 'False'
    lo_export20: 'False'
    lo_export21: 'False'
    lo_export22: 'False'
    lo_export23: 'False'
    lo_export24: 'False'
    lo_export25: 'False'
    lo_export26: 'False'
    lo_export27: 'False'
    lo_export28: 'False'
    lo_export29: 'False'
    lo_export3: 'False'
    lo_export30: 'False'
    lo_export31: 'False'
    lo_export4: 'False'
    lo_export5: 'False'
    lo_export6: 'False'
    lo_export7: 'False'
    lo_export8: 'False'
    lo_export9: 'False'
    lo_source0: internal
    lo_source1: internal
    lo_source10: internal
    lo_source11: internal
    lo_source12: internal
    lo_source13: internal
    lo_source14: internal
    lo_source15: internal
    lo_source16: internal
    lo_source17: internal
    lo_source18: internal
    lo_source19: internal
    lo_source2: internal
    lo_source20: internal
    lo_source21: internal
    lo_source22: internal
    lo_source23: internal
    lo_source24: internal
    lo_source25: internal
    lo_source26: internal
    lo_source27: internal
    lo_source28: internal
    lo_source29: internal
    lo_source3: internal
    lo_source30: internal
    lo_source31: internal
    lo_source4: internal
    lo_source5: internal
    lo_source6: internal
    lo_source7: internal
    lo_source8: internal
    lo_source9: internal
    maxoutbuf: '0'
    minoutbuf: '0'
    nchan: '1'
    norm_gain0: 'False'
    norm_gain1: 'False'
    norm_gain10: 'False'
    norm_gain11: 'False'
    norm_gain12: 'False'
    norm_gain13: 'False'
    norm_gain14: 'False'
    norm_gain15: 'False'
    norm_gain16: 'False'
    norm_gain17: 'False'
    norm_gain18: 'False'
    norm_gain19: 'False'
    norm_gain2: 'False'
    norm_gain20: 'False'
    norm_gain21: 'False'
    norm_gain22: 'False'
    norm_gain23: 'False'
    norm_gain24: 'False'
    norm_gain25: 'False'
    norm_gain26: 'False'
    norm_gain27: 'False'
    norm_gain28: 'False'
    norm_gain29: 'False'
    norm_gain3: 'False'
    norm_gain30: 'False'
    norm_gain31: 'False'
    norm_gain4: 'False'
    norm_gain5: 'False'
    norm_gain6: 'False'
    norm_gain7: 'False'
    norm_gain8: 'False'
    norm_gain9: 'False'
    num_mboards: '1'
    otw: ''
    samp_rate: '128000'
    sd_spec0: ''
    sd_spec1: ''
    sd_spec2: ''
    sd_spec3: ''
    sd_spec4: ''
    sd_spec5: ''
    sd_spec6: ''
    sd_spec7: ''
    show_lo_controls: 'False'
    stream_args: ''
    stream_chans: '[]'
    sync: sync
    time_source0: ''
    time_source1: ''
    time_source2: ''
    time_source3: ''
    time_source4: ''
    time_source5: ''
    time_source6: ''
    time_source7: ''
    type: fc32
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1298, 265]
    rotation: 0
    state: enabled

connections:
- [blocks_float_to_complex_0, '0', blocks_repeat_0, '0']
- [blocks_repeat_0, '0', qtgui_freq_sink_x_0, '0']
- [blocks_repeat_0, '0', qtgui_time_sink_x_0, '0']
- [blocks_repeat_0, '0', uhd_usrp_sink_0, '0']
- [blocks_uchar_to_float_0, '0', blocks_float_to_complex_0, '0']
- [epy_block_0, '0', blocks_uchar_to_float_0, '0']
- [epy_block_0, '0', epy_block_3, '0']
- [epy_block_0, Clear, qtgui_edit_box_msg_0, val]
- [epy_block_1, '0', epy_block_2, '0']
- [epy_block_3, '0', blocks_repeat_0, '0']
- [qtgui_edit_box_msg_0, msg, epy_block_0, inputMessage]

metadata:
  file_format: 1
